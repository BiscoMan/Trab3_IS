/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ElevatorSimulation;

import java.util.ArrayList;
import java.util.Collections;
import javax.swing.DefaultListModel;
import javax.swing.SpinnerDateModel;
import javax.swing.SpinnerNumberModel;

/**
 *
 * @author Andr√©
 */
public class InsideFrame extends javax.swing.JFrame {

    /**
     * Creates new form InsideFrame
     */
    int upperBound;
    int currentPosition = 0;
    boolean stoped = true;
    boolean goingUp = false;
    boolean goingDown = false;
    int nextPosition = 0;
    DefaultListModel myModel;
    ArrayList<Integer> myDestinies = new ArrayList<>();

    InsideFrame(int upperBound) {
        initComponents();

        this.upperBound = upperBound;
        this.newDestinyValue.setModel(new SpinnerNumberModel(0, 0, upperBound, 1));
        
        //initializing list
        this.myModel = new DefaultListModel();
        this.myModel.clear();
        this.listOfDestinies.setModel(this.myModel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        currentPositionLabel = new javax.swing.JLabel();
        doorOpenedLabel = new javax.swing.JLabel();
        doorClosedLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listOfDestinies = new javax.swing.JList();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        insertNewDestiny = new javax.swing.JToggleButton();
        newDestinyValue = new javax.swing.JSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAlwaysOnTop(true);
        setFocusableWindowState(false);
        setMinimumSize(new java.awt.Dimension(280, 380));
        getContentPane().setLayout(null);

        currentPositionLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        currentPositionLabel.setForeground(new java.awt.Color(255, 0, 0));
        currentPositionLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        currentPositionLabel.setText("0");
        getContentPane().add(currentPositionLabel);
        currentPositionLabel.setBounds(70, 5, 50, 15);

        doorOpenedLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/openImage.jpg"))); // NOI18N
        getContentPane().add(doorOpenedLabel);
        doorOpenedLabel.setBounds(0, 0, 196, 296);

        doorClosedLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/closeImage.jpg"))); // NOI18N
        getContentPane().add(doorClosedLabel);
        doorClosedLabel.setBounds(0, 0, 196, 296);

        jScrollPane1.setViewportView(listOfDestinies);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(200, 20, 60, 280);
        getContentPane().add(jSeparator1);
        jSeparator1.setBounds(0, 302, 260, 10);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Destinies");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(200, 0, 60, 14);

        insertNewDestiny.setText("Insert Destiny");
        insertNewDestiny.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertNewDestinyActionPerformed(evt);
            }
        });
        getContentPane().add(insertNewDestiny);
        insertNewDestiny.setBounds(120, 310, 140, 23);
        getContentPane().add(newDestinyValue);
        newDestinyValue.setBounds(0, 310, 100, 20);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void insertNewDestinyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertNewDestinyActionPerformed
        if (!this.myDestinies.contains(Integer.parseInt(this.newDestinyValue.getValue().toString())) && Integer.parseInt(this.newDestinyValue.getValue().toString()) <= upperBound) {
            this.myDestinies.add(Integer.parseInt(this.newDestinyValue.getValue().toString()));
            Collections.sort(this.myDestinies);
            this.updateModel();
        }
    }//GEN-LAST:event_insertNewDestinyActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InsideFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel currentPositionLabel;
    private javax.swing.JLabel doorClosedLabel;
    private javax.swing.JLabel doorOpenedLabel;
    private javax.swing.JToggleButton insertNewDestiny;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JList listOfDestinies;
    private javax.swing.JSpinner newDestinyValue;
    // End of variables declaration//GEN-END:variables

    private void updateModel() {
        this.myModel.clear();
        for (Integer nextDestiny : myDestinies) {
            this.myModel.addElement(nextDestiny);
        }
    }

    boolean goToNewPosition(int position) {
        
        if(position > upperBound || position < 0){
            return false;
        }

        nextPosition = position;

        if (!stoped) {
            if(nextPosition == currentPosition) {
                stoped = true;
                goingDown = false;
                goingUp = false;
                openDoor();
                return true;
            }else if(nextPosition > currentPosition) {
                stoped = false;
                goingDown = false;
                goingUp = true;
                return true;
            }else if(nextPosition < currentPosition) {
                stoped = false;
                goingDown = true;
                goingUp = false;
                return true;
            }
            return false;
        } else {
            if (position == currentPosition) {
                stoped = false;
                goingDown = false;
                goingUp = false;
            }
            if (currentPosition > position) {                                     //go down
                stoped = false;
                goingDown = true;
                goingUp = false;
            } else {                                                              //go down
                stoped = false;
                goingDown = false;
                goingUp = true;
            }
            closeDoor();
            return true;
        }
    }

    void updateState() {
        if (!stoped) {

            if (currentPosition == nextPosition) {
                this.myDestinies.remove((Integer)(currentPosition));
                this.updateModel();
                stoped = true;
                goingDown = false;
                goingUp = false;
                openDoor();
            }

            if (goingDown) {
                currentPosition--;
            }
            if (goingUp) {
                currentPosition++;
            }

            this.currentPositionLabel.setText("" + currentPosition);


        }
    }

    private void openDoor() {
        this.doorOpenedLabel.setVisible(true);
    }

    private void closeDoor() {
        this.doorOpenedLabel.setVisible(false);
    }

}
